# Docker provides the ability to package and run an application in a loosely isolated environment called a container.
# The isolation and security allows you to run many containers simultaneously on a given host. Containers are lightweight and contain everything needed to run the application, so you do not need to rely on what is currently installed on the host. 
# You can easily share containers while you work, and be sure that everyone you share with gets the same container that works in the same way.

# IMAGES
$docker build -t <image_name>                 --> Build an image from a Dockerfile
$docker build -t <image_name> . -no-cache     --> Build an image from a Dockerfile without the cache
$docker images     --> To list local images
$docker rmi <image_name>    --> To delete an image
$docker image prune     --> To remove all unused images

#Loading a tarred repository from a file or the standard input stream
$docker image load < ubuntu.tar.gz
$docker image busybox > ubuntu.tar    --> Saving an image to a tar archive
$docker container commit nginx      --> creating an image from a container
$docker image tag nginx abc01/nginx  --> tagging an image

$curl example.com/remote/Dockerfile | docker build -f - .  --> Building from a remote Dockerfile URI

$docker build github.com/creak/docker-firefox  --> From a Remote GIT Repository
$docker image rm nginx   --> Removing an image


#Docker HUB
$docker login -u <username>
$docker push <username>/<image_name>       --> Publish an image to Docker Hub
$docker search <image_name> 
$docker pull <image_name>


# General commands
$docker -d       --> To start the docker daemon
$docker --help
$docker info      --> To display system-wide information


# Containers
#A container is a runtime instance of a docker image. A container will always run the same, regardless of the infrastructure.
#Containers isolate software from its environment and ensure that it works uniformly despite differences for instance between development and staging.

$docker run --name <container_name> <image_name>    --> To create and run a container from an image with a custom name
$docker run -p <host_port>:<container_port> <image_name>    --> To run a container with and publish a container's port(s) to the host
$docker run -d <image_name>     --> To run a container in background
$docker start|stop <container_name> (or <container-id>)     --> To start or stop an existing container
$docker rm <container_name>   --> To remove a stopped container
$docker exec -it <container_name> sh    --> To open a shell inside a running container
$docker logs -f <container_name>    --> To Fetch and follow the logs of a container
$docker inspect <container_name>  (or <container_id>)     --> To inspect a running container
$docker ps   --> To list currently running containers
$docker ps --all   --> To list all docker containers(running and stopped)
$docker container stats   --> To view resource usage stats


# AWS ECR and EKS
login to ECR registry
$aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin <randoncode>.dkr.ecr.<region>.amazonaws.com
$docker build -t <randoncode>.dkr.ecr.<region>.amazonaws.com/demo-app-repo:latest .
$docker push <randoncode>.dkr.ecr.<region>.amazonaws.com/demo-app-repo:latest:demo-app-repo/latest


# Network
$docker network create -d overlay MyOverlaynetwork   --> create a ovrelay network

$docker network create -d bridge MyBridgenetwork  --> create a bridge network

#Creating a customized overlay network
$docker network create -d overlay \
-subnet=192.168.0.0/16 \
-subnet=192.170.0.0/16 \
-gateway=192.160.0.100 \
-gateway=192.170.0.100 \
-ip-range=192.168.1.0/24 \
-aux-address="my-router=192.168.1.5"
-aux-address="my-switch=192.168.1.6" \
-aux-address="my-printer=192.170.1.5"
-aux-address="my-nas=192.170.1.6"
MyOverlaynetwork

$docker network rm MyOverlaynetwork   --> removing a network
$docker network ls   --> listing networks
$docker network connect MyOverlaynetwork nginx  --> connecting a running container to a network
$docker network inspect MyOverlaynetwork  --> getting information about a network


#Removing docker containers, images, volumes and networks
$docker container rm nginx  --> removing a running container
$docker container rm -v nginx  --> removing a container and its volume
$docker container rm $(docker container ls -a -f status=exited -q)  --> removing all exited containers
$docker container rm 'docker container ls -a -q'  --> removing all stopped containers

$docker image rm $(docker image ls -f dangling=true -q)   --> removing dangling images

$docker image rm -f $(docker image ls | grep "^"| awk "{print $3}")   ---> removing all untagged images

$docker system prune -f  --> removing all unused containers, images networks and volumes

